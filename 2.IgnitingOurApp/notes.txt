- use npm init in our folder to manage our dependencies using package.json
- npm doesn't stand for node package manager, in fact there is no full form of npm
- npm is just a package manager for the JS runtime node.js
- package.json is a config file for npm
- packages are also known as dependencies and package.json keeps track for all the packages used in project
- one of the most important package/dependency in a react project is bundler, Bundler helps to bundle/packages our whole code, it minifies it, clean it so that it can be easily and properly pushed to production.
- webpack, parcel, vite etc are all different bundlers
- there are two types of dependencies in project: dev dependencies and normal dependencies. dev dependencies are only used in development and normal dependencies are used for production as well.
- use npm install -D parcel to download parcel bundler package
- bundler is a type of dev dependency that's why we use -D so that it will not be used on production
- we can see parcel under devDependencies in package.json with a ^(caret) before version. A caret is used when we want to auto-upgrade our package to newer minor version. For ex: 2.13.3 may get updated to 2.13.4 but not to 3.0.1 , we can also use ~(tilde) instead of ^ which will auto update our package to latest major version. So in case of ~, our package may get updated to 3.0.1 in future
- when we install the package, we get a new file package-lock.json , which is used to keep a track of exact version of packages that are installed currently.
- the integrity field inside package-lock.json keeps a hash which is used to deal with the problem of it was working on my machine. It help to keep track/verify of exact same verison in dev and prod.
- node_modules contains all the files/code which we downloaded from npm while installing parcel or any other package. These are basically the dependencies being used by our package and known as transitive dependencies.
- never push node_modules on github and put this folder in .gitignore file since these packages are of very high size and unnecessary. If we wish to get all the node_modules again then we can simply run the command npm install
____________________________________________________________________________________________________________________________________
- to ignite our app we can use the command: npx parcel index.html ; here npm is the package executer, parcel is the package that we need to execute and index.html is the main page of out application. this command build our app and host it on a server locally
- as soon as we ignite our app using above command, we get two new folders: .parcel-cache and dist. The .parcel-cache folder contains cached files generated during the build process. Its purpose is to speed up subsequent builds by reusing already processed files rather than rebuilding everything from scratch. The dist folder holds the final, bundled, and minified files that are ready for deployment in prod. This includes your JavaScript files, CSS files, images, and other assets, all bundled together in a way that the browser can load efficiently.
- parcel builds our code, bundles our code, make a server, host our app on that server, do HMR (hot module reload/replacement) using file watching algorithm (this algo is written in C++), image optimizations, minifies the files, compress the files, consistent hashing, code splitting, differential bundling(support different browsers even older ones), diagnostics, error sugestions, HTTPs support, tree shaking (unused or unnecessary code from files i.e. the functions which are not being used anywhere), and much more
- we can use npx parcel build index.html to make a production build of our app. this build will be present in dist folder
- React is not fast in itself but it use powers of bundlers, babel and other libraries that help to make it faster
____________________________________________________________________________________________________________________________________
- install react and react-dom in our project using npm i react and npm i react-dom respectively
- import React and ReactDOM from 'react' and 'react-dom/client' respectively and remove the React CDN links from html file
- we should write type="module" in the script tag in index.html because React script can't be directly injected as package in html
- we can write starta and build commands under scripts inside package.json and then use npm run start instead of npx parcel index.html and similarly for build.
- we can also use npm start instead of npm run start, but it only works with start
____________________________________________________________________________________________________________________________________
- we can add browserslist in package.json , it takes an array in which we can tell for which browsers we want our app to definitely work in any condition. Please visit https://browserslist.dev/ or https://github.com/browserslist/browserslist#query-composition for better understanding.
