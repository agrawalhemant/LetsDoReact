- Higher order component is like a higher order function which takes a component and returns a component. It is used to enhance the existing component by modifying it and then returning it after enhancing.
- We can make a higher order component inside Restaurantcard.js and use it to display the restaurants that are veg only. we have to export our higher order component and use it in body to make a JSX for RestaurantcardWithVegLabel which can be rendered conditionally based on the value of veg field if it is true or not.
- we have to pass the props same like normal Restaurantcard inside RestaurantcardWithVegLabel also, and inside higher order component we have to receive it. then we can pass these props to Restaurantcard inside RestaurantcardWithVegLabel using destructuring.
- i've also implemented a toggle button to see the "veg only" restaurants by searching for tailwind css toggle button on google and then implementing the logic by capturing the cehecked or unchecked state of toggle button using event.target.checked
__________________________________________________________________________________________________________________________________________
- let's use the MENU_API_URL to get data for all the available meals of restaurant and design our menu page.
- we can simply filter out the data which is of type categories and then render the menu of that category as an accordion on menu page
- let's design an accordion from scratch and handle the showing functionality of items
- what if we need to collapse all the other opened accordions when we click to open an accordion??? this can be done if we control our child component using parent component. In this, the child component is known as conrolled component. So in our case, Restaurantmenu is the parent component and Restaurantcard is child component (controlled component)
- we can also modify the state variable of parent component from child component if we pass setState functions of that state variable as a function prop to the child. So here, we'll pass setShowIndex function to the Restaurantcategory component and then in Restaurantcategory component we'll simply call that function onClick event. Similarly we can pass a function by name hideShowIndex which will pass index as -1 so all the items will be hidden.
- this whole above concept is known as lifting state up.
__________________________________________________________________________________________________________________________________________
- in react data flow is one-way thing, it passes from parent of children and then their childen and so on. even if the middle child has no use of that data, it'll have to pass from it to get to its child component. This is a problem in react and it is known as Props Drilling. Basically we are drilling props from parent to child then to its child and so on.
- One of the solutions for this problem is proided by react itself, which is Context. Context basically centralises the data and then it is can be used by any component without need to pass from its parent. 
- React propvides us utility of createConext function using which we can create the context and react also provides a hook useContext using which we can use the created context.
- for example, if we want to centralise the user information as it may be neended in multiple components but may not be needed by the parent component. so in utility folder we can create a contexts folder inside which we'll create a file UserContext.js and then create the context and export it.
- we'll then import the UserContext in Header.js component and read the content/data of UserContext using useContext hook.
- we can also use our created hook into class based components, using .Consumer in JSX . For example, we have UserClass as a class based component whe we can use our UserContext.
- React also provides a way to update the context. We can use .Provider for that purpose in JSX.
- For example, we want to set the userInfo based on Authentication in our App.js root component instead of keeping it constant fro UserContext. 
- The value of context can only be used by the component which is wrapped inside UserContext.Provider JSX. If we have only header inside context component then only header can access the updated value of context and rest of app will use the default value. so make sure to wrape whole app around context.Provider
- let's configure/update the username in UserContext based on the input from user. We can achieve it by passing setUserName state function to the Body component from App.js main component
