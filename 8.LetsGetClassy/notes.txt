- to make a class component, we need to make a class that extends React.Component and it should have a render method whihc will return JSX that'll be rendered on UI
- to recive the props in class component, we need to create a constructor whihc will receive the props and we also need to write super(props).
- we can use props in render method using this.props
______________________________________________________________________________________________________________________________________
- we can also use state variables in class components just like function components using this.state
- state is a reserved keyword in JS
- we can create multiple state variables using a single this.state object altogether while in function component we have to create them one by one using useState hook
- never try to update state variable directly, instead use this.setState method which can be used to update multiple state variables at once also
- this.setState is equivalent to setState() method of useState hook
______________________________________________________________________________________________________________________________________
- while rendering a class component, firstly constructor is called during initiation phase of class and after than render method is called which return the JSX to render on UI
- we should make an PAI call inside componentDidMount() mehtod of class component as it is the last one to be called. It is equivalent to useEffect of funciton component and also workds like it.
- constructor => render => componentDidMount => (if state changed) render => componentDidUpdate => (if component/url is changed) componentWillUnmount
- read about react lifecycle from https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/ for Class components
- Use of ComponentWillMount is to clear up the variables or other code. for example if we have setup a setInterval function in ComponentDidMount then we can clear it in ComponentWillMount or else it will keep running. and if we come back on about page from other URL then a new setInterval will start. That's why it's important to clear up interval while leaving the URL using ComponentWillMount().
- The same problem may occur in functional component also, if we start an interval in useEffect() then it will keep running even after changing the URL so to stop it, we should clear up the interval using return method inside useEffect() method.
- we can have a return method in useEffect which will run when we leave the URL
