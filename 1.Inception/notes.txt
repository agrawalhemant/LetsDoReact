#intro.html

- The querySelector method in JavaScript is used to select the first element within the document that matches a specified CSS selector or group of selectors. (It returns the first matching element or null if no matches are found)
- we can use createElement method to create any new element of HTML using JS.
- we can use innerText method to write text within an HTML element.
- we can use appendChild method to append one element to another element (or we can use innerHTML to write HTML inside an element).

----------------------------------------------------------------------------------------------------------------------------------------
#index.html + App.js

- react can be injected in our project using CDN (https://legacy.reactjs.org/docs/cdn-links.html)
- as soon as we inject react using CDN, we get React & ReactDOM objects in our code (just write React or ReactDOM in console and see the contents of these object)
- https://unpkg.com/react@18/umd/react.development.js => this file has the core react code
- https://unpkg.com/react-dom@18/umd/react-dom.development.js => this file contains the code which is useful for DOM operations 
- remember to keep the CDN files in order and inject your own script after these CDNs.
- we have these two different files because React workd on different kind of devices like, phone, browser etc. So, DOM is only used with browsers.
- we can create new element using React.createElement method which takes 3 arguments (element name, an object which take attributes like id or class, children of element). Second and third arguments together are called as props of that React element. Remember this is a React element which is an object and not a heading tag of HTML.
- creating an element is core functionality of React but to create a root we mut use ReactDOM. To create a root of React, we can use ReactDOM.createRoot and we can use .render method to render an element inside another element
- React.createElement creates a React element but does not render it. ReactDOM.createRoot is used to render React elements/components into the DOM.
- we can pass an array of React elements as children of element in third argument.
- root.render() will replace the contents of root HTML tag with the React element which we are passing as argument to render(). Only the root of React has the render method not any other React elements
- React can only work for the portion of our website, that's why it doesn't affect the h3 headings on top and below of root element. React can only work inside the React root element.
- we can create multiple react root elements for our react elements to render inside them.
- so the flow goes like in App.js: firstly we crated a React element heading which is of type object, then we created root element of React DOM and then we used root.render() which converts the heading react element into a HTML tag and render it inside the root by replacing everything already existing inside root React element.
- React was build to manipulate the DOM using JS because the most expensive operation inside a browser is when DOM doesn't need to manipulated and React handles it very well
- we can write React in JS just fine like in App.js, but the code might not look very readable, that's why React is generally written in JSX.

----------------------------------------------------------------------------------------------------------------------------------------